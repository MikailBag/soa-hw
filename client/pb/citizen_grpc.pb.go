// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: citizen.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CitizenServiceClient is the client API for CitizenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizenServiceClient interface {
	Vote(ctx context.Context, in *CitizenVoteRequest, opts ...grpc.CallOption) (*CitizenVoteResponse, error)
}

type citizenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizenServiceClient(cc grpc.ClientConnInterface) CitizenServiceClient {
	return &citizenServiceClient{cc}
}

func (c *citizenServiceClient) Vote(ctx context.Context, in *CitizenVoteRequest, opts ...grpc.CallOption) (*CitizenVoteResponse, error) {
	out := new(CitizenVoteResponse)
	err := c.cc.Invoke(ctx, "/com.example.demo.api.citizen.CitizenService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizenServiceServer is the server API for CitizenService service.
// All implementations must embed UnimplementedCitizenServiceServer
// for forward compatibility
type CitizenServiceServer interface {
	Vote(context.Context, *CitizenVoteRequest) (*CitizenVoteResponse, error)
	mustEmbedUnimplementedCitizenServiceServer()
}

// UnimplementedCitizenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCitizenServiceServer struct {
}

func (UnimplementedCitizenServiceServer) Vote(context.Context, *CitizenVoteRequest) (*CitizenVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedCitizenServiceServer) mustEmbedUnimplementedCitizenServiceServer() {}

// UnsafeCitizenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizenServiceServer will
// result in compilation errors.
type UnsafeCitizenServiceServer interface {
	mustEmbedUnimplementedCitizenServiceServer()
}

func RegisterCitizenServiceServer(s grpc.ServiceRegistrar, srv CitizenServiceServer) {
	s.RegisterService(&CitizenService_ServiceDesc, srv)
}

func _CitizenService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CitizenVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizenServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.demo.api.citizen.CitizenService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizenServiceServer).Vote(ctx, req.(*CitizenVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizenService_ServiceDesc is the grpc.ServiceDesc for CitizenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.example.demo.api.citizen.CitizenService",
	HandlerType: (*CitizenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _CitizenService_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citizen.proto",
}
