// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: policeman.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicemanServiceClient is the client API for PolicemanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicemanServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Reveal(ctx context.Context, in *RevealRequest, opts ...grpc.CallOption) (*RevealResponse, error)
}

type policemanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicemanServiceClient(cc grpc.ClientConnInterface) PolicemanServiceClient {
	return &policemanServiceClient{cc}
}

func (c *policemanServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/com.example.demo.api.policeman.PolicemanService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policemanServiceClient) Reveal(ctx context.Context, in *RevealRequest, opts ...grpc.CallOption) (*RevealResponse, error) {
	out := new(RevealResponse)
	err := c.cc.Invoke(ctx, "/com.example.demo.api.policeman.PolicemanService/Reveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicemanServiceServer is the server API for PolicemanService service.
// All implementations must embed UnimplementedPolicemanServiceServer
// for forward compatibility
type PolicemanServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Reveal(context.Context, *RevealRequest) (*RevealResponse, error)
	mustEmbedUnimplementedPolicemanServiceServer()
}

// UnimplementedPolicemanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPolicemanServiceServer struct {
}

func (UnimplementedPolicemanServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPolicemanServiceServer) Reveal(context.Context, *RevealRequest) (*RevealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveal not implemented")
}
func (UnimplementedPolicemanServiceServer) mustEmbedUnimplementedPolicemanServiceServer() {}

// UnsafePolicemanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicemanServiceServer will
// result in compilation errors.
type UnsafePolicemanServiceServer interface {
	mustEmbedUnimplementedPolicemanServiceServer()
}

func RegisterPolicemanServiceServer(s grpc.ServiceRegistrar, srv PolicemanServiceServer) {
	s.RegisterService(&PolicemanService_ServiceDesc, srv)
}

func _PolicemanService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicemanServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.demo.api.policeman.PolicemanService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicemanServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicemanService_Reveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicemanServiceServer).Reveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.demo.api.policeman.PolicemanService/Reveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicemanServiceServer).Reveal(ctx, req.(*RevealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicemanService_ServiceDesc is the grpc.ServiceDesc for PolicemanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicemanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.example.demo.api.policeman.PolicemanService",
	HandlerType: (*PolicemanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _PolicemanService_Check_Handler,
		},
		{
			MethodName: "Reveal",
			Handler:    _PolicemanService_Reveal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policeman.proto",
}
